int	200	1	
int	200	2	
menu_principal	301	2	
(	306	2	
)	307	2	
;	310	2	
int	200	3	
menu_editar	301	3	
(	306	3	
)	307	3	
;	310	3	
int	200	4	
menu_reproducir	301	4	
(	306	4	
)	307	4	
;	310	4	
int	200	5	
case_principal	301	5	
(	306	5	
int	200	5	
,	316	5	
Dlinked_list	301	5	
*	305	5	
dlinked_list	301	5	
,	316	5	
int	200	5	
,	316	5	
int	200	5	
,	316	5	
int	200	5	
)	307	5	
;	310	5	
int	200	6	
case_reproducir	301	6	
(	306	6	
int	200	6	
,	316	6	
Dlinked_list	301	6	
*	305	6	
dlinked_list	301	6	
,	316	6	
int	200	6	
*	305	6	
contador	301	6	
)	307	6	
;	310	6	
int	200	7	
case_editar	301	7	
(	306	7	
int	200	7	
,	316	7	
int	200	7	
,	316	7	
Dlinked_list	301	7	
*	305	7	
dlinked_list	301	7	
,	316	7	
int	200	7	
*	305	7	
,	316	7	
int	200	7	
*	305	7	
)	307	7	
;	310	7	
int	200	8	
main	301	8	
(	306	8	
)	307	8	
{	308	8	
Dlinked_list	301	9	
*	305	9	
dlinked_list	301	9	
=	314	9	
create_dlinked_list	301	9	
(	306	9	
)	307	9	
;	310	9	
int	200	10	
opcion	301	10	
;	310	10	
int	200	11	
contador	301	11	
=	314	11	
1	317	11	
;	310	11	
int	200	12	
secuencia	301	12	
=	314	12	
0	317	12	
;	310	12	
int	200	13	
use	301	13	
=	314	13	
1	317	13	
;	310	13	
getchar	301	14	
(	306	14	
)	307	14	
;	310	14	
limpiar_pantalla	301	15	
(	306	15	
)	307	15	
;	310	15	
sleep	301	17	
(	306	17	
2.5	318	17	
)	307	17	
;	310	17	
printf	113	18	
(	306	18	
"\n"	300	18	
)	307	18	
;	310	18	
getchar	301	19	
(	306	19	
)	307	19	
;	310	19	
limpiar_pantalla	301	20	
(	306	20	
)	307	20	
;	310	20	
do	103	21	
{	308	22	
opcion	301	23	
=	314	23	
menu_principal	301	23	
(	306	23	
)	307	23	
;	310	23	
case_principal	301	24	
(	306	24	
opcion	301	24	
,	316	24	
dlinked_list	301	24	
,	316	24	
contador	301	24	
,	316	24	
secuencia	301	24	
,	316	24	
use	301	24	
)	307	24	
;	310	24	
}	309	27	
int	200	29	
menu_principal	301	29	
(	306	29	
)	307	29	
{	308	30	
limpiar_pantalla	301	31	
(	306	31	
)	307	31	
;	310	31	
int	200	32	
option	301	32	
;	310	32	
printf	113	33	
(	306	33	
"\n"	300	33	
)	307	33	
;	310	33	
printf	113	35	
(	306	35	
"1.- Editar Lista\n"	300	35	
)	307	35	
;	310	35	
printf	113	36	
(	306	36	
"2.- Reproducir \n"	300	36	
)	307	36	
;	310	36	
printf	113	37	
(	306	37	
"3.- Salir\n"	300	37	
)	307	37	
;	310	37	
return	112	39	
option	301	39	
;	310	39	
}	309	40	
int	200	42	
case_principal	301	42	
(	306	42	
int	200	42	
opcion	301	42	
,	316	42	
Dlinked_list	301	42	
*	305	42	
dlinked_list	301	42	
,	316	42	
int	200	42	
contador	301	42	
,	316	42	
int	200	42	
secuencia	301	42	
,	316	42	
int	200	42	
use	301	42	
)	307	42	
{	308	43	
int	200	44	
bandera_salida	301	44	
,	316	44	
exit	301	44	
;	310	44	
switch	105	45	
(	306	45	
opcion	301	45	
)	307	45	
{	308	46	
do	103	48	
{	308	49	
bandera_salida	301	50	
=	314	50	
menu_editar	301	50	
(	306	50	
)	307	50	
;	310	50	
break	107	54	
;	310	54	
do	103	56	
{	308	57	
break	107	61	
;	310	61	
sleep	301	63	
(	306	63	
2	317	63	
)	307	63	
;	310	63	
sleep	301	64	
(	306	64	
2	317	64	
)	307	64	
;	310	64	
limpiar_pantalla	301	65	
(	306	65	
)	307	65	
;	310	65	
printf	113	66	
(	306	66	
"\n"	300	66	
)	307	66	
;	310	66	
break	107	67	
;	310	67	
printf	113	69	
(	306	69	
"Reiniciando reproductor...\n"	300	69	
)	307	69	
;	310	69	
break	107	70	
;	310	70	
}	309	71	
return	112	72	
0	317	72	
;	310	72	
}	309	73	
int	200	75	
menu_editar	301	75	
(	306	75	
)	307	75	
{	308	76	
int	200	77	
option	301	77	
;	310	77	
limpiar_pantalla	301	78	
(	306	78	
)	307	78	
;	310	78	
printf	113	81	
(	306	81	
"1.- Agregar Cancion\n"	300	81	
)	307	81	
;	310	81	
printf	113	82	
(	306	82	
"2.- Eliminar cancion \n"	300	82	
)	307	82	
;	310	82	
printf	113	83	
(	306	83	
"3.- Mostrar lista \n"	300	83	
)	307	83	
;	310	83	
printf	113	84	
(	306	84	
"4.- Salir\n"	300	84	
)	307	84	
;	310	84	
printf	113	85	
(	306	85	
"5.- Mostrar lista Ordenada \n"	300	85	
)	307	85	
;	310	85	
printf	113	86	
(	306	86	
"6.- Buscar \n"	300	86	
)	307	86	
;	310	86	
limpiar_pantalla	301	88	
(	306	88	
)	307	88	
;	310	88	
return	112	89	
option	301	89	
;	310	89	
}	309	90	
int	200	92	
case_editar	301	92	
(	306	92	
int	200	92	
opcion	301	92	
,	316	92	
int	200	92	
eleccion	301	92	
,	316	92	
Dlinked_list	301	92	
*	305	92	
dlinked_list	301	92	
,	316	92	
int	200	92	
*	305	92	
conta	301	92	
,	316	92	
int	200	92	
*	305	92	
use	301	92	
)	307	92	
{	308	93	
int	200	95	
item	301	95	
;	310	95	
int	200	96	
i	301	96	
;	310	96	
int	200	97	
type	301	97	
;	310	97	
int	200	98	
delete	301	98	
;	310	98	
fflush	301	99	
(	306	99	
stdin	301	99	
)	307	99	
;	310	99	
int	200	100	
select	301	100	
=	314	100	
0	317	100	
;	310	100	
FILE	301	101	
*	305	101	
song_all_data	301	101	
;	310	101	
char	202	102	
coma	301	102	
;	310	102	
int	200	103	
contador	301	103	
=	314	103	
1	317	103	
;	310	103	
song_all_data	301	104	
=	314	104	
fopen	301	104	
(	306	104	
"/mnt/c/users/vix/desktop/project2/src/songs_all.txt"	300	104	
,	316	104	
"r+"	300	104	
)	307	104	
;	310	104	
size_t	301	106	
orgpos	301	106	
;	310	106	
switch	105	107	
(	306	107	
opcion	301	107	
)	307	107	
{	308	108	
if	100	110	
(	306	110	
eleccion	301	110	
=	314	110	
=	314	110	
0	317	110	
)	307	110	
{	308	111	
if	100	112	
(	306	112	
song_all_data	301	112	
=	314	112	
=	314	112	
NULL	301	112	
)	307	112	
{	308	113	
printf	113	114	
(	306	114	
"ERROR"	300	114	
)	307	114	
;	310	114	
return	112	115	
0	317	115	
;	310	115	
}	309	116	
else	101	117	
{	308	118	
int	200	120	
cont_may	301	120	
=	314	120	
0	317	120	
;	310	120	
int	200	121	
cont_2	301	121	
=	314	121	
0	317	121	
;	310	121	
char	202	122	
cancion2[TAM]	301	122	
;	310	122	
char	202	123	
autor2[TAM]	301	123	
;	310	123	
char	202	124	
identificador[TAM]	301	124	
;	310	124	
char	202	125	
anio[TAM]	301	125	
;	310	125	
char	202	126	
album[TAM]	301	126	
;	310	126	
char	202	127	
duracion[TAM]	301	127	
;	310	127	
{	308	129	
if	100	130	
(	306	130	
cont_may	301	130	
<	311	130	
6	317	130	
)	307	130	
{	308	131	
coma	301	133	
=	314	133	
fgetc	301	133	
(	306	133	
song_all_data	301	133	
)	307	133	
;	310	133	
{	308	135	
char	202	136	
cadena_lectura[contador]	301	136	
;	310	136	
orgpos	301	137	
=	314	137	
ftell	301	137	
(	306	137	
song_all_data	301	137	
)	307	137	
;	310	137	
fseek	301	138	
(	306	138	
song_all_data	301	138	
,	316	138	
-	304	138	
contador	301	138	
,	316	138	
SEEK_CUR	301	138	
)	307	138	
;	310	138	
fgets	301	139	
(	306	139	
cadena_lectura	301	139	
,	316	139	
contador	301	139	
,	316	139	
song_all_data	301	139	
)	307	139	
;	310	139	
if	100	140	
(	306	140	
cont_may	301	140	
=	314	140	
=	314	140	
0	317	140	
)	307	140	
strcpy	301	141	
(	306	141	
identificador	301	141	
,	316	141	
cadena_lectura	301	141	
)	307	141	
;	310	141	
if	100	142	
(	306	142	
cont_may	301	142	
=	314	142	
=	314	142	
1	317	142	
)	307	142	
strcpy	301	143	
(	306	143	
album	301	143	
,	316	143	
cadena_lectura	301	143	
)	307	143	
;	310	143	
if	100	144	
(	306	144	
cont_may	301	144	
=	314	144	
=	314	144	
2	317	144	
)	307	144	
strcpy	301	145	
(	306	145	
autor2	301	145	
,	316	145	
cadena_lectura	301	145	
)	307	145	
;	310	145	
if	100	146	
(	306	146	
cont_may	301	146	
=	314	146	
=	314	146	
3	317	146	
)	307	146	
strcpy	301	147	
(	306	147	
duracion	301	147	
,	316	147	
cadena_lectura	301	147	
)	307	147	
;	310	147	
if	100	148	
(	306	148	
cont_may	301	148	
=	314	148	
=	314	148	
4	317	148	
)	307	148	
strcpy	301	149	
(	306	149	
cancion2	301	149	
,	316	149	
cadena_lectura	301	149	
)	307	149	
;	310	149	
if	100	150	
(	306	150	
cont_may	301	150	
=	314	150	
=	314	150	
5	317	150	
)	307	150	
strcpy	301	151	
(	306	151	
anio	301	151	
,	316	151	
cadena_lectura	301	151	
)	307	151	
;	310	151	
fseek	301	153	
(	306	153	
song_all_data	301	153	
,	316	153	
orgpos	301	153	
,	316	153	
SEEK_SET	301	153	
)	307	153	
;	310	153	
contador	301	154	
=	314	154	
1	317	154	
;	310	154	
cont_may	301	155	
+	303	155	
+	303	155	
;	310	155	
}	309	156	
else	101	157	
contador	301	158	
+	303	158	
+	303	158	
;	310	158	
}	309	159	
else	101	160	
{	308	161	
item	301	162	
=	314	162	
(	306	162	
*	305	162	
conta	301	162	
)	307	162	
;	310	162	
cont_2	301	163	
+	303	163	
=	314	163	
cont_may	301	163	
;	310	163	
contador	301	164	
=	314	164	
1	317	164	
;	310	164	
cont_may	301	165	
=	314	165	
0	317	165	
;	310	165	
(	306	167	
*	305	167	
conta	301	167	
)	307	167	
+	303	167	
+	303	167	
;	310	167	
}	309	168	
}	309	169	
fclose	301	170	
(	306	170	
song_all_data	301	170	
)	307	170	
;	310	170	
return	112	171	
1	317	171	
;	310	171	
}	309	172	
break	107	174	
;	310	174	
}	309	175	
else	101	176	
{	308	177	
char	202	178	
cancion[TAM]	301	178	
;	310	178	
char	202	179	
autor[TAM]	301	179	
;	310	179	
char	202	180	
cancion2[TAM]	301	180	
;	310	180	
char	202	181	
autor2[TAM]	301	181	
;	310	181	
char	202	182	
identificador1[TAM]	301	182	
;	310	182	
char	202	183	
anio1[TAM]	301	183	
;	310	183	
char	202	184	
album1[TAM]	301	184	
;	310	184	
char	202	185	
duracion1[TAM]	301	185	
;	310	185	
char	202	186	
identificador[TAM]	301	186	
;	310	186	
char	202	187	
anio[TAM]	301	187	
;	310	187	
char	202	188	
album[TAM]	301	188	
;	310	188	
char	202	189	
duracion[TAM]	301	189	
;	310	189	
select	301	190	
=	314	190	
1	317	190	
;	310	190	
fflush	301	192	
(	306	192	
stdin	301	192	
)	307	192	
;	310	192	
fflush	301	194	
(	306	194	
stdin	301	194	
)	307	194	
;	310	194	
getchar	301	195	
(	306	195	
)	307	195	
;	310	195	
gets	301	196	
(	306	196	
identificador1	301	196	
)	307	196	
;	310	196	
strcpy	301	197	
(	306	197	
identificador	301	197	
,	316	197	
identificador1	301	197	
)	307	197	
;	310	197	
fflush	301	200	
(	306	200	
stdin	301	200	
)	307	200	
;	310	200	
getchar	301	201	
(	306	201	
)	307	201	
;	310	201	
gets	301	202	
(	306	202	
autor	301	202	
)	307	202	
;	310	202	
strcpy	301	203	
(	306	203	
autor2	301	203	
,	316	203	
autor	301	203	
)	307	203	
;	310	203	
fflush	301	206	
(	306	206	
stdin	301	206	
)	307	206	
;	310	206	
gets	301	207	
(	306	207	
cancion	301	207	
)	307	207	
;	310	207	
strcpy	301	208	
(	306	208	
cancion2	301	208	
,	316	208	
cancion	301	208	
)	307	208	
;	310	208	
fflush	301	211	
(	306	211	
stdin	301	211	
)	307	211	
;	310	211	
getchar	301	212	
(	306	212	
)	307	212	
;	310	212	
gets	301	213	
(	306	213	
album1	301	213	
)	307	213	
;	310	213	
strcpy	301	214	
(	306	214	
album	301	214	
,	316	214	
album1	301	214	
)	307	214	
;	310	214	
fflush	301	217	
(	306	217	
stdin	301	217	
)	307	217	
;	310	217	
gets	301	218	
(	306	218	
duracion1	301	218	
)	307	218	
;	310	218	
strcpy	301	219	
(	306	219	
duracion	301	219	
,	316	219	
duracion1	301	219	
)	307	219	
;	310	219	
fflush	301	222	
(	306	222	
stdin	301	222	
)	307	222	
;	310	222	
gets	301	223	
(	306	223	
anio1	301	223	
)	307	223	
;	310	223	
strcpy	301	224	
(	306	224	
anio	301	224	
,	316	224	
anio1	301	224	
)	307	224	
;	310	224	
(	306	226	
*	305	226	
conta	301	226	
)	307	226	
+	303	226	
+	303	226	
;	310	226	
break	107	227	
;	310	227	
}	309	228	
char	202	231	
Delete_string[TAM]	301	231	
;	310	231	
printf	113	232	
(	306	232	
"\t\tELIMINANDO DATOS...\n\n"	300	232	
)	307	232	
;	310	232	
if	100	236	
(	306	236	
delete	301	236	
=	314	236	
=	314	236	
-	304	236	
2612	317	236	
)	307	236	
{	308	237	
getchar	301	240	
(	306	240	
)	307	240	
;	310	240	
gets	301	241	
(	306	241	
Delete_string	301	241	
)	307	241	
;	310	241	
if	100	243	
(	306	243	
del_node	301	243	
=	314	243	
=	314	243	
INT_MIN	301	243	
)	307	243	
{	308	244	
fflush	301	246	
(	306	246	
stdin	301	246	
)	307	246	
;	310	246	
getchar	301	247	
(	306	247	
)	307	247	
;	310	247	
}	309	248	
else	101	249	
{	308	250	
if	100	251	
(	306	251	
del_node	301	251	
=	314	251	
=	314	251	
INT_MAX	301	251	
)	307	251	
{	308	252	
printf	113	253	
(	306	253	
"Elemento no fue encontrado...\n"	300	253	
)	307	253	
;	310	253	
getchar	301	254	
(	306	254	
)	307	254	
;	310	254	
}	309	255	
else	101	256	
{	308	257	
getchar	301	259	
(	306	259	
)	307	259	
;	310	259	
}	309	260	
}	309	261	
getchar	301	262	
(	306	262	
)	307	262	
;	310	262	
getchar	301	263	
(	306	263	
)	307	263	
;	310	263	
break	107	264	
;	310	264	
}	309	265	
else	101	266	
{	308	267	
if	100	270	
(	306	270	
del_node	301	270	
=	314	270	
=	314	270	
INT_MIN	301	270	
)	307	270	
{	308	271	
fflush	301	273	
(	306	273	
stdin	301	273	
)	307	273	
;	310	273	
getchar	301	274	
(	306	274	
)	307	274	
;	310	274	
}	309	275	
else	101	276	
{	308	277	
if	100	278	
(	306	278	
del_node	301	278	
=	314	278	
=	314	278	
INT_MAX	301	278	
)	307	278	
{	308	279	
printf	113	280	
(	306	280	
"Elemento no fue encontrado...\n"	300	280	
)	307	280	
;	310	280	
getchar	301	281	
(	306	281	
)	307	281	
;	310	281	
}	309	282	
else	101	283	
{	308	284	
getchar	301	285	
(	306	285	
)	307	285	
;	310	285	
}	309	286	
}	309	287	
getchar	301	288	
(	306	288	
)	307	288	
;	310	288	
break	107	289	
;	310	289	
}	309	290	
limpiar_pantalla	301	293	
(	306	293	
)	307	293	
;	310	293	
printf	113	294	
(	306	294	
"\t\t\tMOSTRANDO ELEMENTOS DE LA LISTA\n\n"	300	294	
)	307	294	
;	310	294	
display	301	295	
(	306	295	
dlinked_list	301	295	
)	307	295	
;	310	295	
fflush	301	296	
(	306	296	
stdin	301	296	
)	307	296	
;	310	296	
getchar	301	297	
(	306	297	
)	307	297	
;	310	297	
break	107	298	
;	310	298	
return	112	300	
4	317	300	
;	310	300	
break	107	301	
;	310	301	
int	200	303	
item	301	303	
=	314	303	
(	306	303	
*	305	303	
conta	301	303	
)	307	303	
;	310	303	
limpiar_pantalla	301	305	
(	306	305	
)	307	305	
;	310	305	
printf	113	306	
(	306	306	
"Desea ordenar por ID [1] o por nombre [2]"	300	306	
)	307	306	
;	310	306	
if	100	309	
(	306	309	
type	301	309	
=	314	309	
=	314	309	
1	317	309	
)	307	309	
{	308	310	
printf	113	311	
(	306	311	
"\t\tORDENANDO ELEMENTOS DE LA LISTA POR ID\n\n"	300	311	
)	307	311	
;	310	311	
}	309	313	
else	101	314	
{	308	315	
printf	113	316	
(	306	316	
"\t\tORDENANDO ELEMENTOS DE LA LISTA\n\n"	300	316	
)	307	316	
;	310	316	
}	309	318	
(	306	319	
*	305	319	
use	301	319	
)	307	319	
=	314	319	
1	317	319	
;	310	319	
getchar	301	320	
(	306	320	
)	307	320	
;	310	320	
getchar	301	321	
(	306	321	
)	307	321	
;	310	321	
break	107	322	
;	310	322	
char	202	324	
Delete_string_2[TAM]	301	324	
;	310	324	
int	200	325	
tam	301	325	
=	314	325	
(	306	325	
*	305	325	
conta	301	325	
)	307	325	
;	310	325	
int	200	326	
type	301	326	
;	310	326	
int	200	327	
uso	301	327	
=	314	327	
(	306	327	
*	305	327	
use	301	327	
)	307	327	
;	310	327	
if	100	331	
(	306	331	
type	301	331	
=	314	331	
=	314	331	
0	317	331	
)	307	331	
{	308	332	
getchar	301	334	
(	306	334	
)	307	334	
;	310	334	
gets	301	335	
(	306	335	
Delete_string_2	301	335	
)	307	335	
;	310	335	
printf	113	336	
(	306	336	
"\t\tBuscando elemento\n"	300	336	
)	307	336	
;	310	336	
sleep	301	337	
(	306	337	
3	317	337	
)	307	337	
;	310	337	
limpiar_pantalla	301	338	
(	306	338	
)	307	338	
;	310	338	
}	309	340	
else	101	341	
{	308	342	
getchar	301	344	
(	306	344	
)	307	344	
;	310	344	
gets	301	345	
(	306	345	
Delete_string_2	301	345	
)	307	345	
;	310	345	
printf	113	346	
(	306	346	
"\t\tBuscando elemento\n"	300	346	
)	307	346	
;	310	346	
sleep	301	347	
(	306	347	
3	317	347	
)	307	347	
;	310	347	
limpiar_pantalla	301	348	
(	306	348	
)	307	348	
;	310	348	
}	309	350	
break	107	352	
;	310	352	
break	107	354	
;	310	354	
}	309	355	
return	112	356	
0	317	356	
;	310	356	
}	309	357	
int	200	359	
menu_reproducir	301	359	
(	306	359	
)	307	359	
{	308	360	
int	200	361	
option	301	361	
;	310	361	
printf	113	362	
(	306	362	
"\nreproducir "	300	362	
)	307	362	
;	310	362	
printf	113	363	
(	306	363	
"1.- Play\n"	300	363	
)	307	363	
;	310	363	
printf	113	364	
(	306	364	
"2.- Siguiente \n"	300	364	
)	307	364	
;	310	364	
printf	113	365	
(	306	365	
"3.- Anterior \n"	300	365	
)	307	365	
;	310	365	
printf	113	366	
(	306	366	
"4.- Pausa\n"	300	366	
)	307	366	
;	310	366	
limpiar_pantalla	301	368	
(	306	368	
)	307	368	
;	310	368	
return	112	369	
option	301	369	
;	310	369	
}	309	370	
int	200	372	
case_reproducir	301	372	
(	306	372	
int	200	372	
opcion	301	372	
,	316	372	
Dlinked_list	301	372	
*	305	372	
dlinked_list	301	372	
,	316	372	
int	200	372	
*	305	372	
contador	301	372	
)	307	372	
{	308	373	
fflush	301	374	
(	306	374	
stdin	301	374	
)	307	374	
;	310	374	
limpiar_pantalla	301	375	
(	306	375	
)	307	375	
;	310	375	
reproducir	301	376	
(	306	376	
dlinked_list	301	376	
)	307	376	
;	310	376	
}	309	377	
