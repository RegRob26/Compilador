-	304	1	
int	200	2	
menu_principal	301	2	
(	306	2	
)	307	2	
;	310	2	
int	200	3	
menu_editar	301	3	
(	306	3	
)	307	3	
;	310	3	
int	200	4	
menu_reproducir	301	4	
(	306	4	
)	307	4	
;	310	4	
int	200	5	
case_principal	301	5	
(	306	5	
int	200	5	
,	316	5	
Dlinked_list	301	5	
*	305	5	
dlinked_list	301	5	
,	316	5	
int	200	5	
,	316	5	
int	200	5	
,	316	5	
int	200	5	
)	307	5	
;	310	5	
int	200	6	
case_reproducir	301	6	
(	306	6	
int	200	6	
,	316	6	
Dlinked_list	301	6	
*	305	6	
dlinked_list	301	6	
,	316	6	
int	200	6	
*	305	6	
contador	301	6	
)	307	6	
;	310	6	
int	200	7	
case_editar	301	7	
(	306	7	
int	200	7	
,	316	7	
int	200	7	
,	316	7	
Dlinked_list	301	7	
*	305	7	
dlinked_list	301	7	
,	316	7	
int	200	7	
*	305	7	
,	316	7	
int	200	7	
*	305	7	
)	307	7	
;	310	7	
int	200	9	
main	301	9	
(	306	9	
)	307	9	
{	308	9	
Dlinked_list	301	10	
*	305	10	
dlinked_list	301	10	
=	314	10	
create_dlinked_list	301	10	
(	306	10	
)	307	10	
;	310	10	
int	200	11	
opcion	301	11	
;	310	11	
int	200	12	
contador	301	12	
=	314	12	
1	317	12	
;	310	12	
int	200	13	
secuencia	301	13	
=	314	13	
0	317	13	
;	310	13	
int	200	14	
use	301	14	
=	314	14	
1	317	14	
;	310	14	
getchar	301	15	
(	306	15	
)	307	15	
;	310	15	
limpiar_pantalla	301	16	
(	306	16	
)	307	16	
;	310	16	
sleep	301	18	
(	306	18	
2.5	318	18	
)	307	18	
;	310	18	
printf	113	19	
(	306	19	
"\n"	300	19	
)	307	19	
;	310	19	
getchar	301	20	
(	306	20	
)	307	20	
;	310	20	
limpiar_pantalla	301	21	
(	306	21	
)	307	21	
;	310	21	
do	103	22	
{	308	23	
opcion	301	24	
=	314	24	
menu_principal	301	24	
(	306	24	
)	307	24	
;	310	24	
case_principal	301	25	
(	306	25	
opcion	301	25	
,	316	25	
dlinked_list	301	25	
,	316	25	
contador	301	25	
,	316	25	
secuencia	301	25	
,	316	25	
use	301	25	
)	307	25	
;	310	25	
}	309	28	
int	200	30	
menu_principal	301	30	
(	306	30	
)	307	30	
{	308	31	
limpiar_pantalla	301	32	
(	306	32	
)	307	32	
;	310	32	
int	200	33	
option	301	33	
;	310	33	
printf	113	34	
(	306	34	
"\n"	300	34	
)	307	34	
;	310	34	
printf	113	36	
(	306	36	
"1.- Editar Lista\n"	300	36	
)	307	36	
;	310	36	
printf	113	37	
(	306	37	
"2.- Reproducir \n"	300	37	
)	307	37	
;	310	37	
printf	113	38	
(	306	38	
"3.- Salir\n"	300	38	
)	307	38	
;	310	38	
return	112	40	
option	301	40	
;	310	40	
}	309	41	
int	200	43	
case_principal	301	43	
(	306	43	
int	200	43	
opcion	301	43	
,	316	43	
Dlinked_list	301	43	
*	305	43	
dlinked_list	301	43	
,	316	43	
int	200	43	
contador	301	43	
,	316	43	
int	200	43	
secuencia	301	43	
,	316	43	
int	200	43	
use	301	43	
)	307	43	
{	308	44	
int	200	45	
bandera_salida	301	45	
,	316	45	
exit	301	45	
;	310	45	
switch	105	46	
(	306	46	
opcion	301	46	
)	307	46	
{	308	47	
do	103	49	
{	308	50	
bandera_salida	301	51	
=	314	51	
menu_editar	301	51	
(	306	51	
)	307	51	
;	310	51	
break	107	55	
;	310	55	
do	103	57	
{	308	58	
break	107	62	
;	310	62	
sleep	301	64	
(	306	64	
2	317	64	
)	307	64	
;	310	64	
sleep	301	65	
(	306	65	
2	317	65	
)	307	65	
;	310	65	
limpiar_pantalla	301	66	
(	306	66	
)	307	66	
;	310	66	
printf	113	67	
(	306	67	
"\n"	300	67	
)	307	67	
;	310	67	
break	107	68	
;	310	68	
printf	113	70	
(	306	70	
"Reiniciando reproductor...\n"	300	70	
)	307	70	
;	310	70	
break	107	71	
;	310	71	
}	309	72	
return	112	73	
0	317	73	
;	310	73	
}	309	74	
int	200	76	
menu_editar	301	76	
(	306	76	
)	307	76	
{	308	77	
int	200	78	
option	301	78	
;	310	78	
limpiar_pantalla	301	79	
(	306	79	
)	307	79	
;	310	79	
printf	113	82	
(	306	82	
"1.- Agregar Cancion\n"	300	82	
)	307	82	
;	310	82	
printf	113	83	
(	306	83	
"2.- Eliminar cancion \n"	300	83	
)	307	83	
;	310	83	
printf	113	84	
(	306	84	
"3.- Mostrar lista \n"	300	84	
)	307	84	
;	310	84	
printf	113	85	
(	306	85	
"4.- Salir\n"	300	85	
)	307	85	
;	310	85	
printf	113	86	
(	306	86	
"5.- Mostrar lista Ordenada \n"	300	86	
)	307	86	
;	310	86	
printf	113	87	
(	306	87	
"6.- Buscar \n"	300	87	
)	307	87	
;	310	87	
limpiar_pantalla	301	89	
(	306	89	
)	307	89	
;	310	89	
return	112	90	
option	301	90	
;	310	90	
}	309	91	
int	200	93	
case_editar	301	93	
(	306	93	
int	200	93	
opcion	301	93	
,	316	93	
int	200	93	
eleccion	301	93	
,	316	93	
Dlinked_list	301	93	
*	305	93	
dlinked_list	301	93	
,	316	93	
int	200	93	
*	305	93	
conta	301	93	
,	316	93	
int	200	93	
*	305	93	
use	301	93	
)	307	93	
{	308	94	
int	200	96	
item	301	96	
;	310	96	
int	200	97	
i	301	97	
;	310	97	
int	200	98	
type	301	98	
;	310	98	
int	200	99	
delete	301	99	
;	310	99	
fflush	301	100	
(	306	100	
stdin	301	100	
)	307	100	
;	310	100	
int	200	101	
select	301	101	
=	314	101	
0	317	101	
;	310	101	
FILE	301	102	
*	305	102	
song_all_data	301	102	
;	310	102	
char	202	103	
coma	301	103	
;	310	103	
int	200	104	
contador	301	104	
=	314	104	
1	317	104	
;	310	104	
song_all_data	301	105	
=	314	105	
fopen	301	105	
(	306	105	
"/mnt/c/users/vix/desktop/project2/src/songs_all.txt"	300	105	
,	316	105	
"r+"	300	105	
)	307	105	
;	310	105	
size_t	301	107	
orgpos	301	107	
;	310	107	
switch	105	108	
(	306	108	
opcion	301	108	
)	307	108	
{	308	109	
if	100	111	
(	306	111	
eleccion	301	111	
=	314	111	
=	314	111	
0	317	111	
)	307	111	
{	308	112	
if	100	113	
(	306	113	
song_all_data	301	113	
=	314	113	
=	314	113	
NULL	301	113	
)	307	113	
{	308	114	
printf	113	115	
(	306	115	
"ERROR"	300	115	
)	307	115	
;	310	115	
return	112	116	
0	317	116	
;	310	116	
}	309	117	
else	101	118	
{	308	119	
int	200	121	
cont_may	301	121	
=	314	121	
0	317	121	
;	310	121	
int	200	122	
cont_2	301	122	
=	314	122	
0	317	122	
;	310	122	
char	202	123	
cancion2[TAM]	301	123	
;	310	123	
char	202	124	
autor2[TAM]	301	124	
;	310	124	
char	202	125	
identificador[TAM]	301	125	
;	310	125	
char	202	126	
anio[TAM]	301	126	
;	310	126	
char	202	127	
album[TAM]	301	127	
;	310	127	
char	202	128	
duracion[TAM]	301	128	
;	310	128	
{	308	130	
if	100	131	
(	306	131	
cont_may	301	131	
<	311	131	
6	317	131	
)	307	131	
{	308	132	
coma	301	134	
=	314	134	
fgetc	301	134	
(	306	134	
song_all_data	301	134	
)	307	134	
;	310	134	
{	308	136	
char	202	137	
cadena_lectura[contador]	301	137	
;	310	137	
orgpos	301	138	
=	314	138	
ftell	301	138	
(	306	138	
song_all_data	301	138	
)	307	138	
;	310	138	
fseek	301	139	
(	306	139	
song_all_data	301	139	
,	316	139	
-	304	139	
contador	301	139	
,	316	139	
SEEK_CUR	301	139	
)	307	139	
;	310	139	
fgets	301	140	
(	306	140	
cadena_lectura	301	140	
,	316	140	
contador	301	140	
,	316	140	
song_all_data	301	140	
)	307	140	
;	310	140	
if	100	141	
(	306	141	
cont_may	301	141	
=	314	141	
=	314	141	
0	317	141	
)	307	141	
strcpy	301	142	
(	306	142	
identificador	301	142	
,	316	142	
cadena_lectura	301	142	
)	307	142	
;	310	142	
if	100	143	
(	306	143	
cont_may	301	143	
=	314	143	
=	314	143	
1	317	143	
)	307	143	
strcpy	301	144	
(	306	144	
album	301	144	
,	316	144	
cadena_lectura	301	144	
)	307	144	
;	310	144	
if	100	145	
(	306	145	
cont_may	301	145	
=	314	145	
=	314	145	
2	317	145	
)	307	145	
strcpy	301	146	
(	306	146	
autor2	301	146	
,	316	146	
cadena_lectura	301	146	
)	307	146	
;	310	146	
if	100	147	
(	306	147	
cont_may	301	147	
=	314	147	
=	314	147	
3	317	147	
)	307	147	
strcpy	301	148	
(	306	148	
duracion	301	148	
,	316	148	
cadena_lectura	301	148	
)	307	148	
;	310	148	
if	100	149	
(	306	149	
cont_may	301	149	
=	314	149	
=	314	149	
4	317	149	
)	307	149	
strcpy	301	150	
(	306	150	
cancion2	301	150	
,	316	150	
cadena_lectura	301	150	
)	307	150	
;	310	150	
if	100	151	
(	306	151	
cont_may	301	151	
=	314	151	
=	314	151	
5	317	151	
)	307	151	
strcpy	301	152	
(	306	152	
anio	301	152	
,	316	152	
cadena_lectura	301	152	
)	307	152	
;	310	152	
fseek	301	154	
(	306	154	
song_all_data	301	154	
,	316	154	
orgpos	301	154	
,	316	154	
SEEK_SET	301	154	
)	307	154	
;	310	154	
contador	301	155	
=	314	155	
1	317	155	
;	310	155	
cont_may	301	156	
+	303	156	
+	303	156	
;	310	156	
}	309	157	
else	101	158	
contador	301	159	
+	303	159	
+	303	159	
;	310	159	
}	309	160	
else	101	161	
{	308	162	
item	301	163	
=	314	163	
(	306	163	
*	305	163	
conta	301	163	
)	307	163	
;	310	163	
cont_2	301	164	
+	303	164	
=	314	164	
cont_may	301	164	
;	310	164	
contador	301	165	
=	314	165	
1	317	165	
;	310	165	
cont_may	301	166	
=	314	166	
0	317	166	
;	310	166	
(	306	168	
*	305	168	
conta	301	168	
)	307	168	
+	303	168	
+	303	168	
;	310	168	
}	309	169	
}	309	170	
fclose	301	171	
(	306	171	
song_all_data	301	171	
)	307	171	
;	310	171	
return	112	172	
1	317	172	
;	310	172	
}	309	173	
break	107	175	
;	310	175	
}	309	176	
else	101	177	
{	308	178	
char	202	179	
cancion[TAM]	301	179	
;	310	179	
char	202	180	
autor[TAM]	301	180	
;	310	180	
char	202	181	
cancion2[TAM]	301	181	
;	310	181	
char	202	182	
autor2[TAM]	301	182	
;	310	182	
char	202	183	
identificador1[TAM]	301	183	
;	310	183	
char	202	184	
anio1[TAM]	301	184	
;	310	184	
char	202	185	
album1[TAM]	301	185	
;	310	185	
char	202	186	
duracion1[TAM]	301	186	
;	310	186	
char	202	187	
identificador[TAM]	301	187	
;	310	187	
char	202	188	
anio[TAM]	301	188	
;	310	188	
char	202	189	
album[TAM]	301	189	
;	310	189	
char	202	190	
duracion[TAM]	301	190	
;	310	190	
select	301	191	
=	314	191	
1	317	191	
;	310	191	
fflush	301	193	
(	306	193	
stdin	301	193	
)	307	193	
;	310	193	
fflush	301	195	
(	306	195	
stdin	301	195	
)	307	195	
;	310	195	
getchar	301	196	
(	306	196	
)	307	196	
;	310	196	
gets	301	197	
(	306	197	
identificador1	301	197	
)	307	197	
;	310	197	
strcpy	301	198	
(	306	198	
identificador	301	198	
,	316	198	
identificador1	301	198	
)	307	198	
;	310	198	
fflush	301	201	
(	306	201	
stdin	301	201	
)	307	201	
;	310	201	
getchar	301	202	
(	306	202	
)	307	202	
;	310	202	
gets	301	203	
(	306	203	
autor	301	203	
)	307	203	
;	310	203	
strcpy	301	204	
(	306	204	
autor2	301	204	
,	316	204	
autor	301	204	
)	307	204	
;	310	204	
fflush	301	207	
(	306	207	
stdin	301	207	
)	307	207	
;	310	207	
gets	301	208	
(	306	208	
cancion	301	208	
)	307	208	
;	310	208	
strcpy	301	209	
(	306	209	
cancion2	301	209	
,	316	209	
cancion	301	209	
)	307	209	
;	310	209	
fflush	301	212	
(	306	212	
stdin	301	212	
)	307	212	
;	310	212	
getchar	301	213	
(	306	213	
)	307	213	
;	310	213	
gets	301	214	
(	306	214	
album1	301	214	
)	307	214	
;	310	214	
strcpy	301	215	
(	306	215	
album	301	215	
,	316	215	
album1	301	215	
)	307	215	
;	310	215	
fflush	301	218	
(	306	218	
stdin	301	218	
)	307	218	
;	310	218	
gets	301	219	
(	306	219	
duracion1	301	219	
)	307	219	
;	310	219	
strcpy	301	220	
(	306	220	
duracion	301	220	
,	316	220	
duracion1	301	220	
)	307	220	
;	310	220	
fflush	301	223	
(	306	223	
stdin	301	223	
)	307	223	
;	310	223	
gets	301	224	
(	306	224	
anio1	301	224	
)	307	224	
;	310	224	
strcpy	301	225	
(	306	225	
anio	301	225	
,	316	225	
anio1	301	225	
)	307	225	
;	310	225	
(	306	227	
*	305	227	
conta	301	227	
)	307	227	
+	303	227	
+	303	227	
;	310	227	
break	107	228	
;	310	228	
}	309	229	
char	202	232	
Delete_string[TAM]	301	232	
;	310	232	
printf	113	233	
(	306	233	
"\t\tELIMINANDO DATOS...\n\n"	300	233	
)	307	233	
;	310	233	
if	100	237	
(	306	237	
delete	301	237	
=	314	237	
=	314	237	
-	304	237	
2612	317	237	
)	307	237	
{	308	238	
getchar	301	241	
(	306	241	
)	307	241	
;	310	241	
gets	301	242	
(	306	242	
Delete_string	301	242	
)	307	242	
;	310	242	
if	100	244	
(	306	244	
del_node	301	244	
=	314	244	
=	314	244	
INT_MIN	301	244	
)	307	244	
{	308	245	
fflush	301	247	
(	306	247	
stdin	301	247	
)	307	247	
;	310	247	
getchar	301	248	
(	306	248	
)	307	248	
;	310	248	
}	309	249	
else	101	250	
{	308	251	
if	100	252	
(	306	252	
del_node	301	252	
=	314	252	
=	314	252	
INT_MAX	301	252	
)	307	252	
{	308	253	
printf	113	254	
(	306	254	
"Elemento no fue encontrado...\n"	300	254	
)	307	254	
;	310	254	
getchar	301	255	
(	306	255	
)	307	255	
;	310	255	
}	309	256	
else	101	257	
{	308	258	
getchar	301	260	
(	306	260	
)	307	260	
;	310	260	
}	309	261	
}	309	262	
getchar	301	263	
(	306	263	
)	307	263	
;	310	263	
getchar	301	264	
(	306	264	
)	307	264	
;	310	264	
break	107	265	
;	310	265	
}	309	266	
else	101	267	
{	308	268	
if	100	271	
(	306	271	
del_node	301	271	
=	314	271	
=	314	271	
INT_MIN	301	271	
)	307	271	
{	308	272	
fflush	301	274	
(	306	274	
stdin	301	274	
)	307	274	
;	310	274	
getchar	301	275	
(	306	275	
)	307	275	
;	310	275	
}	309	276	
else	101	277	
{	308	278	
if	100	279	
(	306	279	
del_node	301	279	
=	314	279	
=	314	279	
INT_MAX	301	279	
)	307	279	
{	308	280	
printf	113	281	
(	306	281	
"Elemento no fue encontrado...\n"	300	281	
)	307	281	
;	310	281	
getchar	301	282	
(	306	282	
)	307	282	
;	310	282	
}	309	283	
else	101	284	
{	308	285	
getchar	301	286	
(	306	286	
)	307	286	
;	310	286	
}	309	287	
}	309	288	
getchar	301	289	
(	306	289	
)	307	289	
;	310	289	
break	107	290	
;	310	290	
}	309	291	
limpiar_pantalla	301	294	
(	306	294	
)	307	294	
;	310	294	
printf	113	295	
(	306	295	
"\t\t\tMOSTRANDO ELEMENTOS DE LA LISTA\n\n"	300	295	
)	307	295	
;	310	295	
display	301	296	
(	306	296	
dlinked_list	301	296	
)	307	296	
;	310	296	
fflush	301	297	
(	306	297	
stdin	301	297	
)	307	297	
;	310	297	
getchar	301	298	
(	306	298	
)	307	298	
;	310	298	
break	107	299	
;	310	299	
return	112	301	
4	317	301	
;	310	301	
break	107	302	
;	310	302	
int	200	304	
item	301	304	
=	314	304	
(	306	304	
*	305	304	
conta	301	304	
)	307	304	
;	310	304	
limpiar_pantalla	301	306	
(	306	306	
)	307	306	
;	310	306	
printf	113	307	
(	306	307	
"Desea ordenar por ID [1] o por nombre [2]"	300	307	
)	307	307	
;	310	307	
if	100	310	
(	306	310	
type	301	310	
=	314	310	
=	314	310	
1	317	310	
)	307	310	
{	308	311	
printf	113	312	
(	306	312	
"\t\tORDENANDO ELEMENTOS DE LA LISTA POR ID\n\n"	300	312	
)	307	312	
;	310	312	
}	309	314	
else	101	315	
{	308	316	
printf	113	317	
(	306	317	
"\t\tORDENANDO ELEMENTOS DE LA LISTA\n\n"	300	317	
)	307	317	
;	310	317	
}	309	319	
(	306	320	
*	305	320	
use	301	320	
)	307	320	
=	314	320	
1	317	320	
;	310	320	
getchar	301	321	
(	306	321	
)	307	321	
;	310	321	
getchar	301	322	
(	306	322	
)	307	322	
;	310	322	
break	107	323	
;	310	323	
char	202	325	
Delete_string_2[TAM]	301	325	
;	310	325	
int	200	326	
tam	301	326	
=	314	326	
(	306	326	
*	305	326	
conta	301	326	
)	307	326	
;	310	326	
int	200	327	
type	301	327	
;	310	327	
int	200	328	
uso	301	328	
=	314	328	
(	306	328	
*	305	328	
use	301	328	
)	307	328	
;	310	328	
if	100	332	
(	306	332	
type	301	332	
=	314	332	
=	314	332	
0	317	332	
)	307	332	
{	308	333	
getchar	301	335	
(	306	335	
)	307	335	
;	310	335	
gets	301	336	
(	306	336	
Delete_string_2	301	336	
)	307	336	
;	310	336	
printf	113	337	
(	306	337	
"\t\tBuscando elemento\n"	300	337	
)	307	337	
;	310	337	
sleep	301	338	
(	306	338	
3	317	338	
)	307	338	
;	310	338	
limpiar_pantalla	301	339	
(	306	339	
)	307	339	
;	310	339	
}	309	341	
else	101	342	
{	308	343	
getchar	301	345	
(	306	345	
)	307	345	
;	310	345	
gets	301	346	
(	306	346	
Delete_string_2	301	346	
)	307	346	
;	310	346	
printf	113	347	
(	306	347	
"\t\tBuscando elemento\n"	300	347	
)	307	347	
;	310	347	
sleep	301	348	
(	306	348	
3	317	348	
)	307	348	
;	310	348	
limpiar_pantalla	301	349	
(	306	349	
)	307	349	
;	310	349	
}	309	351	
break	107	353	
;	310	353	
break	107	355	
;	310	355	
}	309	356	
return	112	357	
0	317	357	
;	310	357	
}	309	358	
int	200	360	
menu_reproducir	301	360	
(	306	360	
)	307	360	
{	308	361	
int	200	362	
option	301	362	
;	310	362	
printf	113	363	
(	306	363	
"\nreproducir "	300	363	
)	307	363	
;	310	363	
printf	113	364	
(	306	364	
"1.- Play\n"	300	364	
)	307	364	
;	310	364	
printf	113	365	
(	306	365	
"2.- Siguiente \n"	300	365	
)	307	365	
;	310	365	
printf	113	366	
(	306	366	
"3.- Anterior \n"	300	366	
)	307	366	
;	310	366	
printf	113	367	
(	306	367	
"4.- Pausa\n"	300	367	
)	307	367	
;	310	367	
limpiar_pantalla	301	369	
(	306	369	
)	307	369	
;	310	369	
return	112	370	
option	301	370	
;	310	370	
}	309	371	
int	200	373	
case_reproducir	301	373	
(	306	373	
int	200	373	
opcion	301	373	
,	316	373	
Dlinked_list	301	373	
*	305	373	
dlinked_list	301	373	
,	316	373	
int	200	373	
*	305	373	
contador	301	373	
)	307	373	
{	308	374	
fflush	301	375	
(	306	375	
stdin	301	375	
)	307	375	
;	310	375	
limpiar_pantalla	301	376	
(	306	376	
)	307	376	
;	310	376	
reproducir	301	377	
(	306	377	
dlinked_list	301	377	
)	307	377	
;	310	377	
}	309	378	
